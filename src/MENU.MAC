;****************************************************************************
;**************************** macro list ************************************
;****************************************************************************
;* blank                where           ; riempe la linea di spazi
;* print                where,msg,msg2  ; visualizza il messaggio msg
;* .menu                maxmenu         ; make a selection menu (of maxmenu)
;* .display             num,text1,text2 ; display the menu number num
;* .action    todo }    num             ; if confirmed execute 
;* .back                                ; backward instead forward key
;* .endmenu                             ; current menu termination
;* .input               begin,end,backch; user input beetwen begin and end
;* .maxval              pos,val,prec    ;
;* .minval              pos,val,prec    ;
;* .break               pos,char        ; put a break char in pos
;* .endinput                            ; end of user input
;****************************************************************************

;************************
.macro  blank  where
   pushuw  rr6
   pushuw  rr8
   ldw     rr6,#where
   ld      r8,#16
   ld      r9,#32
   loop [r8]
   {
      ld      (rr6)+,r9
   }
   popuw   rr8
   popuw   rr6
.endm
;************************
;.macro  print  where,msg1,msg2
.macro  print  msg1,msg2
   ldw     RR92,msg1
   .ifc nb msg2
   ldw     RR94,msg2
   .endc
   .ifc b msg2
   ldw     RR94,#0
   .endc
   call    _print
.endm
;************************
.macro .menu maxmenu
   ld      r2,#0
   loop {
      ld      r1,DIGIT
      clr     DIGIT
      .ifc nb maxmenu
      if [r1 == #FORWBACK]
      {
         inc      r2
         if [r2 > maxmenu]
         {
            xor    r2,r2
         }
      }
      .endc
.endm
;************************
.macro .display num,text1,text2,funct
   if [r2 == num]
   {
      print #line1,#text1
      .ifc nb text2
      print #line2,#text2
      .endc
      .ifc nb funct
      call  funct
      .endc
   }
.endm
;************************
.macro .action num
      if [[r2 == num] && [r1 == #CONFIRM]]
      {
.endm
;************************
.macro .back
      if [r1 == #FORWBACK]
      {
         break
      }
.endm
;************************
.macro .endmenu
      ifnobit SWITCH, #PROG
         break
      }
      clr     r1
   }
.endm
;************************
.macro .input pos,len,backch
   ld      R80,#pos+1
   ld      R82,#backch
   ld      R81,#pos
   add     R81,#len
   loop
   {
      ld      r1,DIGIT
      clr     DIGIT
      if [[r8 >= #pos] && [r8 <= R81]]
      {
.endm
;************************
.macro .maxval pos,val,prec
         ld      R83,#pos
         ld      R84,#val
         .ifc b prec
         ld      R85,#0xFF
         .endc
         .ifc nb prec
         ld      R85,#prec
         .endc
         call    _maxval
.endm
;************************
.macro .minval pos,val,prec
         ld      R86,#pos
         ld      R87,#val
         .ifc b prec
         ld      R88,#0xFF
         .endc
         .ifc nb prec
         ld      R88,#prec
         .endc
         call    _minval
.endm
;************************
.macro .break pos,char
         ld      R89,#pos+1
         ld      R90,#pos-1
         ld      R91,#char
         call    _break
.endm
;************************
.macro .endinput
         call    _endinput
         if [r1 == #0xFF]
         {
            break
         }
      }
      clr     r1
   }
.endm
;************************

























