;****************************************************************************
;**************************** macro list ************************************
;****************************************************************************
;* T0_start                             ; start T0 timer
;* T0_stop                              ; stop T0 timer
;* delay                us              ; ritardo di xxxxx us (fino 65535)
;* sleep                ms              ; ritardo di xxxxx ms (fino 65535)
;* relay1               on/off          ; eccita/diseccita il relay 1
;* relay2               on/off          ; eccita/diseccita il relay 2
;* led1                 on/off          ; accende/spegne il led 1
;* led2                 on/off          ; accende/spegne il led 2
;* backlight            on/off          ; accende/spegne il backlight
;* mute                 on/off          ; attiva/disattiva il muting
;* MC118                on/off          ; attiva/disattiva MC34118
;* MC119                on/off          ; attiva/disattiva MC34119
;* spi_di                               ; disable SPI interrupt
;* spi_ei                               ; enable SPI interrupt
;* remote_di                            ; disable REMOTE interrupt
;* remote_ei                            ; enable REMOTE interrupt
;* _8880_di                             ; disable MT8880 interrupt
;* _8880_ei                             ; enable MT8880 interrupt
;* byte2nibble          byte,nb10,nb1   ; byte to nibbles (F,F)
;* nibble2byte          nb10,nb1,byte   ; nibbles (F,F) to byte
;* I2C            opr,slave,addr,lenght ; read/write/verify i2c slaves
;* zero                 address,lenght  ; zeros a buffer of lenght bytes
;* byte2bcd             byte,bcd10,bcd1 ; byte to BCD (9,9)
;* bcd2byte             bcd10,bcd1,byte ; BCD to byte (9,9)
;****************************************************************************

;************************                       
.macro  T0_start
	pushu   PPR
	spp     #T0D_PG
   or      T_TCR,#cen
	popu    PPR
.endm
;************************
.macro  T0_stop
	pushu   PPR
	spp     #T0D_PG
   and     T_TCR,#~cen
   popu    PPR
.endm
;************************                       
.macro  WD_start
	pushu   PPR
   spp     #WDT_PG
   or      WDTCR,#stsp
	popu    PPR
.endm
;************************
.macro  WD_stop
	pushu   PPR
   spp     #WDT_PG
   and     WDTCR,#~stsp
   popu    PPR
.endm
;************************    
.macro  delay   us
	pushuw  rr0
	ldw     rr0,us
	loopw [rr0] {
	   nop
	}
	popuw   rr0
.endm
;************************
.macro  sleep   ms
	pushuw  rr0
   ldw     rr0,ms
   call    _msleep
	popuw   rr0
.endm
;************************
.macro   spi_di       
   and   EIPR,#~ipspi
   and   EIMR,#~ispi
.endm
;************************
.macro   spi_ei
   and   EIPR,#~ipspi  
	nop
   or    EIMR,#ispi    
.endm
;************************
.macro   remote_di       
   and   EIPR,#~iprem
   and   EIMR,#~irem
.endm
;************************
.macro   remote_ei
   and   EIPR,#~iprem  
	nop
   or    EIMR,#irem  
.endm
;************************
.macro   _8880_di       
   and   EIPR,#~ip8880
   and   EIMR,#~i8880
.endm
;************************
.macro   _8880_ei
   and   EIPR,#~ip8880  
	nop
   or    EIMR,#i8880    
.endm
;************************
.macro   relay1 status
   .ifc eq status
      and     P5DR,#~REL1
   .endc
   .ifc ne status
      or      P5DR,#REL1
   .endc
.endm
;************************
.macro   relay2 status
   .ifc eq status
      and     P5DR,#~REL2
   .endc
   .ifc ne status
      or      P5DR,#REL2
   .endc
.endm
;************************
.macro   led1 status
   .ifc ndf EMU
   .ifc eq status
      and     P2DR,#~LED1
   .endc
   .ifc ne status
      or      P2DR,#LED1
   .endc
   .endc
.endm
;************************
.macro   led2 status
   .ifc ndf EMU
   .ifc eq status
      and     P2DR,#~LED2
   .endc
   .ifc ne status
      or      P2DR,#LED2
   .endc
   .endc
.endm
;************************
.macro   backlight status
   .ifc ndf EMU
   .ifc eq status
      and     P2DR,#~BACKLIGHT
   .endc
   .ifc ne status
      or      P2DR,#BACKLIGHT
   .endc
   .endc
.endm
;************************
.macro   mute status
   .ifc eq status
      and     P5DR,#~MUTE
   .endc
   .ifc ne status
      or      P5DR,#MUTE
   .endc
.endm
;************************
.macro   MC118 status
   pushu   PPR
   P1_PAGE
   .ifc eq status
      or      P1D,#PD118
   .endc
   .ifc ne status
      and     P1D,#~PD118
   .endc
   popu    PPR
.endm
;************************
.macro   MC119 status
   pushu   PPR
   P1_PAGE
   .ifc eq status
      or      P1D,#PD119
   .endc
   .ifc ne status
      and     P1D,#~PD119
   .endc
   popu    PPR
.endm
;************************
.macro byte2nibble byte,nb10,nb1
   ld      nb1,byte
   and     nb1,#0Fh
   ld      nb10,byte
   and     nb10,#0F0h
   swap    nb10
.endm
;************************
.macro nibble2byte nb10,nb1,byte
   ld      byte,nb10
   swap    byte
   or      byte,nb1
.endm
;************************
.macro I2C op,slave,addr,lenght
   ld      SLAVE_STAT,#SLAVE_READY
   ld      SLAVE_OP,#op
   ld      SLAVE_W,#slave
   ldw     LENGHT,lenght
   ldw     SLAVE_ABS,addr
   call    _i2c_transfer
.endm
;************************
.macro bcd2ascii bcd,ascii
   switch [bcd]
   {
      case #0:
            ld      ascii,#48
      case #10:
            ld      ascii,#48
      case #11:         
            ld      ascii,#42
      case #12:         
            ld      ascii,#35
      default:          
            ld      ascii,bcd
            add     ascii,#48
   }
.endm
;************************
.macro zero address,lenght
   pushuw  rr0
   pushuw  rr2
   xor     r0,r0
   ldw     rr2,lenght
   loopw   [rr2]
   {
      ld      address(rr2),r0
   }
   ld      address(rr2),r0
   popuw   rr2
   popuw   rr0
.endm
;************************
.macro dtmf2bcd dtmf,bcd
   ld      bcd,dtmf
   if [dtmf == #10]
   {
      ld      bcd,#0
   }
.endm
;************************
.macro bcd2dtmf bcd,dtmf
   ld      bcd,dtmf
   if [bcd == #0]
   {
      ld      dtmf,#10
   }
.endm
;************************
.macro byte2bcd byte,bcd10,bcd1
   ld      bcd10,#0
   while [byte > #9]
   {
      inc     bcd10
      sub     byte,#10
   }
   ld      bcd1,byte
.endm
;************************
.macro bcd2byte bcd10,bcd1,byte
   pushuw  rr14
   ld      byte,bcd10
   ld      r14,#9
   ld      r15,byte
   loop [r14] {
      add byte,r15
   }
   add     byte,bcd1
   popuw   rr14
.endm
;************************
.macro byte2hex byte,asciih,asciil
   ld      asciil,byte
   and     asciil,#0Fh
   ld      asciih,byte
   and     asciih,#0F0h
   swap    asciih
   if [asciil < #10]
   {
      add     asciil,#48
   } else {
      add     asciil,#55
   }
   if [asciih < #10]
   {
      add     asciih,#48
   } else {
      add     asciih,#55
   }
.endm
;************************




